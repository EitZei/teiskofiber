{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/heap.js","webpack:///./src/calculate.worker.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Heap","defaultCmp","floor","heapify","heappop","heappush","heappushpop","heapreplace","insort","min","nlargest","nsmallest","updateItem","_siftdown","_siftup","Math","x","y","a","lo","hi","cmp","mid","Error","length","splice","apply","concat","array","item","push","lastelt","returnitem","pop","_ref","_i","_len","_ref1","_results","_results1","_j","this","reverse","pos","indexOf","elem","result","slice","sort","los","startpos","newitem","parent","parentpos","childpos","endpos","rightpos","nodes","replace","pushpop","peek","contains","clear","empty","size","clone","heap","toArray","insert","top","front","has","copy","define","undefined","__WEBPACK_AMD_DEFINE_RESULT__","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__webpack_exports__","_heap__WEBPACK_IMPORTED_MODULE_0__","_heap__WEBPACK_IMPORTED_MODULE_0___default","line","b","coordinates","weight","sqrt","pow","density","noApartments","self","addEventListener","async","data","buildings","edgeHeap","maxLineLength","j","w","from","to","buildHeap","treeIndex","tree","id","totalLength","edges","buildTreeIndex","console","log","targetDensity","totalEdgeCount","shortestEdge","fromTree","toTree","wouldBeTotalLength","wouldBeNoApartments","wouldBeDensity","postMessage","status","total","remaining","forEach","building","mst","filteredTrees","targetNoApartments","trees","filter","filterTrees"],"mappings":"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","file":"Calculator.b84c1bc631d303a6dd50.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","// Generated by CoffeeScript 1.8.0\n(function() {\n  var Heap, defaultCmp, floor, heapify, heappop, heappush, heappushpop, heapreplace, insort, min, nlargest, nsmallest, updateItem, _siftdown, _siftup;\n\n  floor = Math.floor, min = Math.min;\n\n\n  /*\n  Default comparison function to be used\n   */\n\n  defaultCmp = function(x, y) {\n    if (x < y) {\n      return -1;\n    }\n    if (x > y) {\n      return 1;\n    }\n    return 0;\n  };\n\n\n  /*\n  Insert item x in list a, and keep it sorted assuming a is sorted.\n  \n  If x is already in a, insert it to the right of the rightmost x.\n  \n  Optional args lo (default 0) and hi (default a.length) bound the slice\n  of a to be searched.\n   */\n\n  insort = function(a, x, lo, hi, cmp) {\n    var mid;\n    if (lo == null) {\n      lo = 0;\n    }\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (lo < 0) {\n      throw new Error('lo must be non-negative');\n    }\n    if (hi == null) {\n      hi = a.length;\n    }\n    while (lo < hi) {\n      mid = floor((lo + hi) / 2);\n      if (cmp(x, a[mid]) < 0) {\n        hi = mid;\n      } else {\n        lo = mid + 1;\n      }\n    }\n    return ([].splice.apply(a, [lo, lo - lo].concat(x)), x);\n  };\n\n\n  /*\n  Push item onto heap, maintaining the heap invariant.\n   */\n\n  heappush = function(array, item, cmp) {\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    array.push(item);\n    return _siftdown(array, 0, array.length - 1, cmp);\n  };\n\n\n  /*\n  Pop the smallest item off the heap, maintaining the heap invariant.\n   */\n\n  heappop = function(array, cmp) {\n    var lastelt, returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    lastelt = array.pop();\n    if (array.length) {\n      returnitem = array[0];\n      array[0] = lastelt;\n      _siftup(array, 0, cmp);\n    } else {\n      returnitem = lastelt;\n    }\n    return returnitem;\n  };\n\n\n  /*\n  Pop and return the current smallest value, and add the new item.\n  \n  This is more efficient than heappop() followed by heappush(), and can be\n  more appropriate when using a fixed size heap. Note that the value\n  returned may be larger than item! That constrains reasonable use of\n  this routine unless written as part of a conditional replacement:\n      if item > array[0]\n        item = heapreplace(array, item)\n   */\n\n  heapreplace = function(array, item, cmp) {\n    var returnitem;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    returnitem = array[0];\n    array[0] = item;\n    _siftup(array, 0, cmp);\n    return returnitem;\n  };\n\n\n  /*\n  Fast version of a heappush followed by a heappop.\n   */\n\n  heappushpop = function(array, item, cmp) {\n    var _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (array.length && cmp(array[0], item) < 0) {\n      _ref = [array[0], item], item = _ref[0], array[0] = _ref[1];\n      _siftup(array, 0, cmp);\n    }\n    return item;\n  };\n\n\n  /*\n  Transform list into a heap, in-place, in O(array.length) time.\n   */\n\n  heapify = function(array, cmp) {\n    var i, _i, _j, _len, _ref, _ref1, _results, _results1;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    _ref1 = (function() {\n      _results1 = [];\n      for (var _j = 0, _ref = floor(array.length / 2); 0 <= _ref ? _j < _ref : _j > _ref; 0 <= _ref ? _j++ : _j--){ _results1.push(_j); }\n      return _results1;\n    }).apply(this).reverse();\n    _results = [];\n    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n      i = _ref1[_i];\n      _results.push(_siftup(array, i, cmp));\n    }\n    return _results;\n  };\n\n\n  /*\n  Update the position of the given item in the heap.\n  This function should be called every time the item is being modified.\n   */\n\n  updateItem = function(array, item, cmp) {\n    var pos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    pos = array.indexOf(item);\n    if (pos === -1) {\n      return;\n    }\n    _siftdown(array, 0, pos, cmp);\n    return _siftup(array, pos, cmp);\n  };\n\n\n  /*\n  Find the n largest elements in a dataset.\n   */\n\n  nlargest = function(array, n, cmp) {\n    var elem, result, _i, _len, _ref;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    result = array.slice(0, n);\n    if (!result.length) {\n      return result;\n    }\n    heapify(result, cmp);\n    _ref = array.slice(n);\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      elem = _ref[_i];\n      heappushpop(result, elem, cmp);\n    }\n    return result.sort(cmp).reverse();\n  };\n\n\n  /*\n  Find the n smallest elements in a dataset.\n   */\n\n  nsmallest = function(array, n, cmp) {\n    var elem, i, los, result, _i, _j, _len, _ref, _ref1, _results;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    if (n * 10 <= array.length) {\n      result = array.slice(0, n).sort(cmp);\n      if (!result.length) {\n        return result;\n      }\n      los = result[result.length - 1];\n      _ref = array.slice(n);\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        elem = _ref[_i];\n        if (cmp(elem, los) < 0) {\n          insort(result, elem, 0, null, cmp);\n          result.pop();\n          los = result[result.length - 1];\n        }\n      }\n      return result;\n    }\n    heapify(array, cmp);\n    _results = [];\n    for (i = _j = 0, _ref1 = min(n, array.length); 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {\n      _results.push(heappop(array, cmp));\n    }\n    return _results;\n  };\n\n  _siftdown = function(array, startpos, pos, cmp) {\n    var newitem, parent, parentpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    newitem = array[pos];\n    while (pos > startpos) {\n      parentpos = (pos - 1) >> 1;\n      parent = array[parentpos];\n      if (cmp(newitem, parent) < 0) {\n        array[pos] = parent;\n        pos = parentpos;\n        continue;\n      }\n      break;\n    }\n    return array[pos] = newitem;\n  };\n\n  _siftup = function(array, pos, cmp) {\n    var childpos, endpos, newitem, rightpos, startpos;\n    if (cmp == null) {\n      cmp = defaultCmp;\n    }\n    endpos = array.length;\n    startpos = pos;\n    newitem = array[pos];\n    childpos = 2 * pos + 1;\n    while (childpos < endpos) {\n      rightpos = childpos + 1;\n      if (rightpos < endpos && !(cmp(array[childpos], array[rightpos]) < 0)) {\n        childpos = rightpos;\n      }\n      array[pos] = array[childpos];\n      pos = childpos;\n      childpos = 2 * pos + 1;\n    }\n    array[pos] = newitem;\n    return _siftdown(array, startpos, pos, cmp);\n  };\n\n  Heap = (function() {\n    Heap.push = heappush;\n\n    Heap.pop = heappop;\n\n    Heap.replace = heapreplace;\n\n    Heap.pushpop = heappushpop;\n\n    Heap.heapify = heapify;\n\n    Heap.updateItem = updateItem;\n\n    Heap.nlargest = nlargest;\n\n    Heap.nsmallest = nsmallest;\n\n    function Heap(cmp) {\n      this.cmp = cmp != null ? cmp : defaultCmp;\n      this.nodes = [];\n    }\n\n    Heap.prototype.push = function(x) {\n      return heappush(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pop = function() {\n      return heappop(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.peek = function() {\n      return this.nodes[0];\n    };\n\n    Heap.prototype.contains = function(x) {\n      return this.nodes.indexOf(x) !== -1;\n    };\n\n    Heap.prototype.replace = function(x) {\n      return heapreplace(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.pushpop = function(x) {\n      return heappushpop(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.heapify = function() {\n      return heapify(this.nodes, this.cmp);\n    };\n\n    Heap.prototype.updateItem = function(x) {\n      return updateItem(this.nodes, x, this.cmp);\n    };\n\n    Heap.prototype.clear = function() {\n      return this.nodes = [];\n    };\n\n    Heap.prototype.empty = function() {\n      return this.nodes.length === 0;\n    };\n\n    Heap.prototype.size = function() {\n      return this.nodes.length;\n    };\n\n    Heap.prototype.clone = function() {\n      var heap;\n      heap = new Heap();\n      heap.nodes = this.nodes.slice(0);\n      return heap;\n    };\n\n    Heap.prototype.toArray = function() {\n      return this.nodes.slice(0);\n    };\n\n    Heap.prototype.insert = Heap.prototype.push;\n\n    Heap.prototype.top = Heap.prototype.peek;\n\n    Heap.prototype.front = Heap.prototype.peek;\n\n    Heap.prototype.has = Heap.prototype.contains;\n\n    Heap.prototype.copy = Heap.prototype.clone;\n\n    return Heap;\n\n  })();\n\n  (function(root, factory) {\n    if (typeof define === 'function' && define.amd) {\n      return define([], factory);\n    } else if (typeof exports === 'object') {\n      return module.exports = factory();\n    } else {\n      return root.Heap = factory();\n    }\n  })(this, function() {\n    return Heap;\n  });\n\n}).call(this);\n","import Heap from './heap';\n\nconst line = (a, b) => [a.coordinates, b.coordinates];\n\nconst weight = (l) => Math.sqrt(Math.pow(l[0][0] - l[1][0], 2) + Math.pow(l[0][1] - l[1][1], 2));\n\nconst density = (length, noApartments) => noApartments / (length / 1000);\n\nconst buildHeap = async (buildings, maxLineLength) => {\n  const edgeHeap = new Heap((a, b) => a.weight - b.weight);\n\n  for (var i = 0; i < buildings.length; i++) {\n    for (var j = i; j < buildings.length; j++) {\n      if (buildings[i] !== buildings[j]) {\n        const l = line(buildings[i], buildings[j])\n        const w = weight(l);\n\n        if (w <= maxLineLength) {\n          edgeHeap.push({\n            from: buildings[i],\n            to: buildings[j],\n            line: l,\n            length: w,\n            weight: w\n          });\n        }\n      }\n    }\n  }\n\n  return edgeHeap;\n}\n\nconst buildTreeIndex = async buildings => {\n  const treeIndex = [];\n\n  for (var i = 0; i < buildings.length; i++) {\n    const tree = {\n      id: i,\n      totalLength: 0,\n      noApartments: buildings[i].noApartments,\n      edges: [],\n      buildings: [buildings[i]],\n    }\n\n    treeIndex[buildings[i].id] = tree;\n  }\n\n  return treeIndex;\n}\n\nconst mst = async (edgeHeap, treeIndex, targetDensity) => {\n  const totalEdgeCount = edgeHeap.size();\n  while (edgeHeap.size() > 0) {\n    const shortestEdge = edgeHeap.pop();\n\n    const fromTree = treeIndex[shortestEdge.from.id];\n    const toTree = treeIndex[shortestEdge.to.id];\n\n    if (fromTree === toTree) {\n      continue;\n    }\n\n    const wouldBeTotalLength = fromTree.totalLength + toTree.totalLength + shortestEdge.length;\n    const wouldBeNoApartments = fromTree.noApartments + toTree.noApartments;\n    const wouldBeDensity = density(wouldBeTotalLength, wouldBeNoApartments);\n\n    if (edgeHeap.size() % 1000 === 0) {\n      self.postMessage({\n        status: 'progress',\n        total: totalEdgeCount,\n        remaining: edgeHeap.size()\n      });\n    }\n\n    // Discard edges as it cannot form a dense enough tree\n    if (wouldBeDensity < targetDensity) {\n      continue;\n    }\n\n    fromTree.totalLength = wouldBeTotalLength;\n    fromTree.noApartments = wouldBeNoApartments;\n    fromTree.edges.push(shortestEdge.line);\n    fromTree.edges = fromTree.edges.concat(toTree.edges);\n    fromTree.buildings = fromTree.buildings.concat(toTree.buildings)\n\n    toTree.buildings.forEach(building => {\n      treeIndex[building.id] = fromTree;\n    })\n  }\n}\n\nconst filterTrees = async (treeIndex, targetNoApartments) => {\n  const trees = [];\n  treeIndex.forEach(tree => {\n    if (trees.indexOf(tree) < 0) {\n      trees.push(tree);\n    }\n  })\n\n  return trees.filter(tree => tree.noApartments >= targetNoApartments);\n}\n\nself.addEventListener('message', async ({\n  data\n}) => {\n\n  const buildings = data.buildings;\n\n  const edgeHeap = await buildHeap(buildings, data.maxLineLength);\n\n  const treeIndex = await buildTreeIndex(buildings);\n\n  console.log(\"Buildings\", buildings.length, \"Edges\", edgeHeap.size(), \"Index\", treeIndex.length);\n\n  await mst(edgeHeap, treeIndex, data.targetDensity);\n\n  const filteredTrees = await filterTrees(treeIndex, data.targetNoApartments);\n\n  self.postMessage({\n    status: 'done',\n    trees: filteredTrees\n  });\n});\n"],"sourceRoot":""}